mixin typedInp(key, inpType, limits, defaultValue, classes, readonly)
  -var defIsFunc = typeof defaultValue === 'function'
  -var def = defIsFunc ? defaultValue() : Array.isArray(defaultValue) ? defaultValue.join(', ') : defaultValue

  if Array.isArray(inpType)
    select(name=key id=key class=classes)
      each opt in inpType
        option(value=opt selected=(opt === def))= opt
  else if isNaN(inpType)
    input(
      name=key id=key class=classes readonly=(inpType === 'readonly' || readonly)
      value=(inpType === 'checkbox' || defIsFunc ? undefined : def)
      placeholder=(inpType === 'checkbox' || !defIsFunc ? undefined : def)
      checked=(inpType === 'checkbox' ? !!def : undefined)
      type=(inpType === 'id' ? "number" : inpType === 'readonly' ? "text" : inpType)
      step=(inpType === 'number' ? "any" : inpType === 'id' ? "1" : undefined)
      pattern=(inpType === 'number' || inpType === 'id' ? "\\d+" : undefined)
      min=(limits && (['number', 'id', 'date'].includes(inpType)) ? limits.min : inpType === 'id' ? "0" : undefined)
      max=(limits && (['number', 'id', 'date'].includes(inpType)) ? limits.max : undefined)
      minLength=(limits && (inpType === 'text' || inpType === 'password') ? limits.min : undefined)
      maxLength=(limits && (inpType === 'text' || inpType === 'password') ? limits.max : undefined)
      autocomplete=(inpType === 'password' ? 'new-password' : key === 'username' ? 'username' : undefined)
    )
    if (inpType === 'password')
      button.toggle-password.small(type="button")
  else
    textarea(name=key id=key class=classes rows=inpType placeholder=(defIsFunc ? def : undefined))= defIsFunc ? undefined : def


mixin formInput(key, inpType, limits, defaultValue, label, classes, tooltip, readonly)
  if inpType === 'hidden'
    +typedInp(key, inpType, null, defaultValue, "hidden", readonly)
  else if inpType === 'checkbox'
    .input-group
      +typedInp(key, inpType, limits, defaultValue, classes, readonly)
      label(for=key aria-label=tooltip class=(tooltip ? 'tooltip' : ''))= label || varName(key)
  else
    .input-group.vertical
      label(for=key aria-label=tooltip class=(tooltip ? 'tooltip' : ''))= label || varName(key)
      +typedInp(key, inpType, limits, defaultValue, classes, readonly)


mixin checkboxes(key, rows, label, columns, defaults)
  - defaults = typeof defaults === 'function' ? defaults() : defaults

  fieldset.input-group.vertical(id=key+'Checks')
    legend= label || varName(key)
    if !columns
      each row in rows
        .input-group
          input(type='checkbox' class=key+'Checks' name=key id=row value=row checked=(defaults && defaults.intersects(row)))
          label(for=row)= varName(row)
    else
      .grid(style=(columns && `grid-template-columns: repeat(${columns.length + 1}, min-content)`))
        .grid-hdr
        each col in columns
          label.grid-hdr(for=col)= varName(col)
        each row in rows
          label.grid-hdr.grid-right(for=row)= varName(row)
          each col in columns
            input(
              type='checkbox' name=key title=`${row} ${col}`
              class=`${key}Checks` data-row=row data-col=col
              id=`${row}-${col}` value=`${row}-${col}`
              checked=(defaults && defaults.obj && defaults.obj[row] && defaults.obj[row].intersects(col))
            )


mixin buttonInput(key, inpType, buttons, limits, defaultValue, url, label, tooltip, buttonKey = formKeys.button, buttonType = 'button')
  .input-group.vertical.button-input
    label(for=key aria-label=tooltip class=(tooltip ? 'tooltip' : ''))= label || varName(key)
    .button-group
      if (inpType)
        +typedInp(key, inpType, limits, defaultValue)
      each button in buttons
        input.button(type=buttonType name=buttonKey id=buttonKey+button value=button formaction=url)


mixin buttonRow(buttons, classes = {}, urls = {}, key = formKeys.button, buttonType = 'submit')
  .button-group
    each action in buttons
      input.large(
        type=buttonType name=key id=key+action value=action
        class=((classes[action] && classes[action].replace('disabled','').trim()) || 'inverse')
        disabled=(!!classes[action] && classes[action].includes('disabled'))
        formaction=(urls[action])
      )


mixin pageData(page, size, id = formKeys.page, pageKey = 'page', sizeKey = 'size')
  if (page || size)
    +formInput(id, 'hidden', null, JSON.stringify({ [pageKey]: page || 1, [sizeKey]: size || null }))


mixin pageNav(page, size, total, sizes, prev = '<', next = '>', pageKey = 'page', sizeKey = 'size')
  .row.center

    if (total > 1)
      .col.row.center
        if prev
          a.button(href=(page > 1 && `?${pageKey}=${page - 1}&${sizeKey}=${size}`) disabled=(page < 2))= prev

        -var p = 0
        while p++ < total
          a.button.solid(href=(p !== page && `?${pageKey}=${p}&${sizeKey}=${size}`) disabled=(p === page) class=(p === page ? 'inverse' : ''))= p

        if next
          a.button(href=(page < total && `?${pageKey}=${page + 1}&${sizeKey}=${size}`) disabled=(page >= total))= next

    if (total > 1 && sizes && sizes.length > 1)
      .marginX

    if (sizes && sizes.length > 1)
      .col.row
        .col.center.marginX Page size:
        each opt in sizes
          a.button.solid(href=(size !== opt && `?${pageKey}=1&${sizeKey}=${opt}`) disabled=(size === opt) class=(size === opt ? 'inverse' : ''))= opt